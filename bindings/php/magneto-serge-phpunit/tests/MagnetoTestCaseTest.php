<?php

declare(strict_types=1);

namespace MagnetoSerge\PHPUnit\Tests;

use MagnetoSerge\PHPUnit\MagnetoTestCase;
use MagnetoSerge\PHPUnit\Cassette;

/**
 * Tests for MagnetoTestCase
 */
class MagnetoTestCaseTest extends MagnetoTestCase
{
    protected string $cassetteDir = 'tests/fixtures/cassettes';

    #[Cassette('test_basic')]
    public function testBasicCassetteUsage(): void
    {
        $cassette = $this->getCurrentCassette();
        $this->assertNotNull($cassette);
        $this->assertStringContainsString('test_basic', $cassette);
    }

    #[Cassette]
    public function testAutoGeneratedCassetteName(): void
    {
        $cassette = $this->getCurrentCassette();
        $this->assertNotNull($cassette);
        $this->assertStringContainsString('MagnetoTestCaseTest', $cassette);
        $this->assertStringContainsString('auto_generated_cassette_name', $cassette);
    }

    #[Cassette('custom_name', mode: 'auto')]
    public function testCustomCassetteName(): void
    {
        $cassette = $this->getCurrentCassette();
        $this->assertEquals('custom_name', $cassette);
    }

    public function testManualCassetteControl(): void
    {
        $this->assertNull($this->getCurrentCassette());

        $this->useCassette('manual_cassette', function() {
            // Cassette active within callback
            $this->assertTrue(true);
        });

        $this->assertNull($this->getCurrentCassette());
    }

    public function testNestedCassettes(): void
    {
        $this->useCassette('outer', function() {
            $this->useCassette('inner', function() {
                $this->assertTrue(true);
            });
        });

        $this->assertNull($this->getCurrentCassette());
    }

    #[Cassette('replay_mode', mode: 'replay')]
    public function testReplayMode(): void
    {
        $this->assertNotNull($this->getCurrentCassette());
    }

    #[Cassette('record_all', record: 'all')]
    public function testRecordAllMode(): void
    {
        $this->assertNotNull($this->getCurrentCassette());
    }

    public function testUseCassetteWithOptions(): void
    {
        $this->useCassette('options_test', function() {
            $this->assertTrue(true);
        }, ['record' => 'all']);

        $this->assertNull($this->getCurrentCassette());
    }
}
