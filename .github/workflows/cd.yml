name: CD

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  publish-crates-io:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Build library
        run: cargo build --release

      - name: Copy native library
        run: |
          mkdir -p bindings/javascript/lib
          cp target/release/libmagneto_serge.dylib bindings/javascript/lib/ || true
          cp target/release/libmagneto_serge.so bindings/javascript/lib/ || true

      - name: Publish to NPM
        working-directory: bindings/javascript
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install maturin twine

      - name: Build Python wheel
        working-directory: bindings/python
        run: maturin build --release

      - name: Publish to PyPI
        if: matrix.os == 'ubuntu-latest'
        working-directory: bindings/python
        run: |
          twine upload target/wheels/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  publish-maven:
    name: Publish to Maven Central
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build library
        run: cargo build --release

      - name: Install UniFFI bindgen
        run: cargo install uniffi_bindgen --version 0.28.0

      - name: Generate Kotlin bindings
        run: |
          uniffi-bindgen generate src/magneto_serge.udl \
            --language kotlin \
            --out-dir bindings/kotlin/generated

      - name: Copy native library
        run: |
          mkdir -p bindings/java/src/main/resources
          cp target/release/libmagneto_serge.so bindings/java/src/main/resources/ || true
          cp target/release/libmagneto_serge.dylib bindings/java/src/main/resources/ || true

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Publish to Maven Central
        working-directory: bindings/java
        run: mvn clean deploy -Possrh
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-crates-io, publish-npm, publish-pypi, publish-maven]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build release binaries
        run: cargo build --release --all-features

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/release/magneto
            target/release/libmagneto_serge.so
            target/release/libmagneto_serge.dylib
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/magneto-serge:latest
            ${{ secrets.DOCKER_USERNAME }}/magneto-serge:${{ steps.get_version.outputs.VERSION }}
          platforms: linux/amd64,linux/arm64
